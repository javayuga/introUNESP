/*

----Modularização de Programas------

  Em C, algumas funções já são pré defi-
das:
    *pow(x,2) -> quadrado de x
    *sqrt(x)  -> raiz quadrada de x
    *sin(x)   -> seno de x
  Nesses exemplos, pow, sqrt e sin são os
identificadores da função. Já o x e 2 são 
parâmetros formais da função.
  Quando precisamos criar nossas próprias
funções, devemos seguir os passos utili-
zados nas pré-definidas. Por exemplo:
  
  Quero fazer uma função que leia um in-
teiro x multiplique-o por um valor f (o
qual começa em 1). Essa função correspon-
de a um calculo de fatorial.  Assim:
     
     inteiro fat(inteiro x)
     inicio
     inteiro i, f=1;
     para i=x até 1 faça
       f=f*i;
     fim-para;
     
     retorna (f);
     
  Traduzindo para a linguagem, temos que:
             
     int fat(int x) {
     
       for (i=x; i>1; i--)
         f=f*i;
       }
       return f;
     }

  Outro exemplo: Dados dois números N e K,
calcular a combinação Cn,k (fatorial).

     inteiro fat (inteiro x)    \
     início                     \
       inteiro i, f=1;          \ Nesse cam-
     para i=x até 1 faça        \po, criamos 
       f=f*i;                   \a função fat,
     fim-para;                  \sendo que cal-
                                \cula o fatorial.
     retorna (f);               \
     
     início                     \
       inteiro n, k, c;         \ Aqui, temos o
       leia(n,k);               \algorítmo prin-
       c=fat(n)/fat(k)*fat(n-k) \cipal. Nele, cha-
       escreva c;               \mamos a função fat.
     fim.                       \

  Traduzindo, temos:
              
#include<stdio.h>
#include<stdlib.h>

int fat (int x){
    int i,f=1;
    for(i=x;i>1;i--){
    f=f*i;
    }
 return f;
}

int main(){
    int n,k;
    float c;
    
    printf(“FORNECA O VALOR DE N: “); scanf(“%d”,&n);
    printf(“FORNECA O VALOR DE K: “); scanf(“%d”,&k);
    
    c= (float) fat(n)/(fat(k)*fat(n-k));

     printf(“C(%d,%d)=%.2f”,n,k,c);
     
return 0;
}
       
****Resumindo, criamos o template para criar funções:
  
  tipo nome(declaração dos parametros)  

{
  instruções   // espaço para implementar a função (contrato)
              // tipo: saída (float, int, void...)     
}

 Funções retornam um resultado que deve ser do mesmo tipo
para o qual a função foi declarada anteriormente.

   <tipo_retornado> <nome_função>(<lista_dos_parametos>)
   int fatorial (int n)
   
  O Comando return é responsável por encerrar a execução da
função e retornar o valor daquele tipo.
  
  return result

obs -> nome: verbo+substantivo e parametro: entrada do usuario   
    -> void nao retorna nada

*/